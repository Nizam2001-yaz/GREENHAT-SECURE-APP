import React, { useState } from 'react';
import { MODULES } from '../../constants';
import { generateQuizQuestions } from '../../services/geminiService';
import type { Module, QuizQuestion } from '../../types';
import QuizScreen from './QuizScreen';
import QuizResultScreen from './QuizResultScreen';
import { LoadingState } from '../core/Dashboard';

type LearningViewState = 'list' | 'loading' | 'quiz' | 'result';

const LearningHub: React.FC = () => {
    const [view, setView] = useState<LearningViewState>('list');
    const [selectedModule, setSelectedModule] = useState<Module | null>(null);
    const [quizQuestions, setQuizQuestions] = useState<QuizQuestion[]>([]);
    const [quizResult, setQuizResult] = useState({ score: 0, total: 0 });
    const [error, setError] = useState<string | null>(null);

    const handleModuleSelect = async (module: Module) => {
        setSelectedModule(module);
        setView('loading');
        setError(null);
        try {
            const questions = await generateQuizQuestions(module.title);
            if (questions.length < 50) {
                 throw new Error("The AI generated an incomplete quiz. Please try again.");
            }
            setQuizQuestions(questions);
            setView('quiz');
        } catch (err: any) {
            setError(err.message || 'An unexpected error occurred.');
            setView('list'); // Go back to list on error
        }
    };
    
    const handleQuizComplete = (score: number, total: number) => {
        setQuizResult({ score, total });
        setView('result');
    };

    const handleRetryQuiz = () => {
        // We can reuse the fetched questions
        setView('quiz');
    };

    const handleBackToModules = () => {
        setSelectedModule(null);
        setQuizQuestions([]);
        setView('list');
    };

    if (view === 'loading') {
        return <LoadingState title={`Generating Quiz for ${selectedModule?.title}...`} subtitle="HatBot is creating 50 unique questions for you. This may take a moment."/>;
    }

    if (view === 'quiz') {
        return <QuizScreen moduleTitle={selectedModule!.title} questions={quizQuestions} onComplete={handleQuizComplete} />;
    }

    if (view === 'result') {
        return <QuizResultScreen {...quizResult} onRetry={handleRetryQuiz} onBack={handleBackToModules} />;
    }

    // Default view: 'list'
    return (
        <div className="p-4 sm:p-6 md:p-8 text-white">
            <h1 className="text-3xl font-bold text-neon-green font-mono">Learning Modules</h1>
            <p className="mt-2 text-gray-400 max-w-2xl">Test your knowledge. Select a module to start a 50-question quiz generated by AI.</p>
            {error && <p className="mt-4 p-4 bg-red-900/50 text-red-300 border border-red-500 rounded-lg">{error}</p>}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
                {MODULES.map((module) => (
                    <button
                        key={module.id}
                        onClick={() => handleModuleSelect(module)}
                        className="p-6 bg-gray-900/50 backdrop-blur-sm border-2 border-gray-700 rounded-2xl text-left transition-all duration-300 hover:border-neon-green hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-neon-green"
                    >
                        <module.icon className="h-10 w-10 mb-4 text-neon-green" />
                        <h3 className="text-xl font-bold text-white">{module.title}</h3>
                        <p className="mt-2 text-gray-400 text-sm">{module.description}</p>
                    </button>
                ))}
            </div>
        </div>
    );
};

export default LearningHub;
